#!/bin/bash

# Global parameters
PROXY_USER_CONFIG='~/.proxysql.cnf'
MYSQL_USER_CONFIG='~/.my.cnf'
MYSQL_USER_PREFIX='v'

db_connection(){
    CONNECTION_STATUS_FAILED=1
    while [ $CONNECTION_STATUS_FAILED -eq 1 ]; do
        CONNECTION_STATUS_FAILED=0
        MYSQL_CONNECT_CHECK=`mysql --defaults-file=$MYSQL_USER_CONFIG -e 'SHOW DATABASES'`
        if [ $? -ne 0 ] ;then
            echo "MySQL connection failed."
            CONNECTION_STATUS_FAILED=1
        fi
        PROXY_CONNECT_CHECK=`mysql --defaults-file=$PROXY_USER_CONFIG -e 'SHOW DATABASES'`
        if [ $? -ne 0 ] ;then
        	echo "ProxySQL connection failed."
        	CONNECTION_STATUS_FAILED=1
        fi
        sleep 1
    done
}

get_password_column_name(){
	column_name=''
	host=''

	if [ $1 ]; then
		host="-h$1"
	fi 
	if [ `mysql --defaults-file=$MYSQL_USER_CONFIG $host -e "SELECT authentication_string FROM mysql.user" > /dev/null 2>&1; echo $?` -eq 0 ]; then
		column_name='authentication_string'
	fi
	if [ `mysql --defaults-file=$MYSQL_USER_CONFIG $host -e "SELECT password FROM mysql.user" > /dev/null 2>&1; echo $?` -eq 0 ]; then
		column_name='password'
	fi

	if [ "$column_name" == "" ]; then
		echo "Unable to determine the password column for the mysql.user table"
	fi

	echo $column_name
}


while true; do
    # Validate database connectivity
    db_connection

    # Capture users in Local MySQL store, confirm they are all less than 24 hours in age.  Anything older needs to be cleaned out.
    # Will only ne working on credentials that start with v-ldap and are vault created credentials.  This script will not touch any other logins.
    OLD_IFS=$IFS
    IFS=$'\n'
    echo "Discovering the vault users from the MySQL instance"	
    PASS_COL=`get_password_column_name`
    VAULT_USER_RESULT=($(mysql --defaults-file=$MYSQL_USER_CONFIG -Bse "SELECT Host,User,$PASS_COL,Select_priv,Insert_priv FROM mysql.user WHERE TIMESTAMPDIFF(HOUR, password_last_changed, NOW()) < 24 AND user LIKE '$MYSQL_USER_PREFIX%'"))
    for i in ${VAULT_USER_RESULT[@]}; do
        host=`echo $i | awk '{print $1}'`
        user=`echo $i | awk '{print $2}'`
        pass=`echo $i | awk '{print $3}'`
        select=`echo $i | awk '{print $4}'`
        insert=`echo $i | awk '{print $5}'`
        echo "  USER : $user"
	echo "    HOST : $host"
        echo "    PERMISSIONS : SELECT $select or INSERT $insert"
    done

    echo ""
    echo "Starting MySQL user sync"
    # Capture users and hosts in the Local MySQL store
	HOST_RESULT=($(mysql --defaults-file=$MYSQL_USER_CONFIG -Bse "SELECT host,ip,port,enabled,creds_created_count FROM mysql_inventory.hosts WHERE enabled = 1"))
	PROXYSQL_USER_RESULT=($(mysql --defaults-file=$PROXY_USER_CONFIG -Bse "SELECT username,password FROM mysql_users WHERE username LIKE '$MYSQL_USER_PREFIX%'"))

	# Loop thorugh each server
    	for i in ${HOST_RESULT[@]}; do
                ihost=`echo $i | awk '{print $1}'`
                ip=`echo $i | awk '{print $2}'`
		port=`echo $i | awk '{print $3}'`
                enabled=`echo $i | awk '{print $4}'`
                cred_count=`echo $i | awk '{print $5}'`

		echo "  Validate Connectivity to $ip with $port"

		CONNECT_CHECK=`mysql --defaults-file=$MYSQL_USER_CONFIG -h $ip -P $port -e "SHOW DATABASES"`
		if [ $? -ne 0 ] || [ $enabled -eq 0 ] ;then
			echo "  Failed to connect to $ihost or it's disabled : $enabled"
		else
			echo "  Starting sync on $ip"
			PASS_COL=`get_password_column_name $ip`
			HOST_USER_RESULT=($(mysql --defaults-file=$MYSQL_USER_CONFIG -h $ip -P $port -Bse "SELECT user,$PASS_COL FROM mysql.user WHERE user LIKE '$MYSQL_USER_PREFIX%'"))
			echo "    Sync and remove old stale credentials"
			for hu in ${HOST_USER_RESULT[@]}; do
				host_user=`echo $hu | awk '{print $1}'`
				host_pass=`echo $hu | awk '{print $2}'`
				#echo "      Checking for user $host_user in the vault users."
				FOUND=0
				for u in ${VAULT_USER_RESULT[@]}; do
				        vault_host=`echo $u | awk '{print $1}'`
				        vault_user=`echo $u | awk '{print $2}'`
				        vault_pass=`echo $u | awk '{print $3}'`
					vault_select=`echo $u | awk '{print $4}'`
				        vault_insert=`echo $u | awk '{print $5}'`
					if [ "$host_user" == "$vault_user" ] && [ "$host_pass" == "$vault_pass" ]; then
						#echo "      Found $user, dont need to remove"
						FOUND=1
					fi
	    			done

				if [ $FOUND -eq 0 ]; then
					echo "        !! Found $host_user in vault user list.  This should be removed from the server!!"
					mysql --defaults-file=$MYSQL_USER_CONFIG -h $ip -P $port -e "DROP USER '$host_user'@'%';"
                                        mysql --defaults-file=$MYSQL_USER_CONFIG -h $ip -P $port -e "FLUSH PRIVILEGES;"
				fi
			done

			echo "    Sync and add new Vault credentials"
			for u in ${VAULT_USER_RESULT[@]}; do
                        	vault_host=`echo $u | awk '{print $1}'`
                                vault_user=`echo $u | awk '{print $2}'`
                                vault_pass=`echo $u | awk '{print $3}'`
                                vault_select=`echo $u | awk '{print $4}'`
                                vault_insert=`echo $u | awk '{print $5}'`

				echo "      Checking to see if $vault_user@$vault_host user belongs on this host.  If not skip the user"
				if [ $vault_host == $ihost ] || [ $vault_host == $ip ]; then
					echo "      Checking for vault user $vault_user on the host.  If it's not there then we need to add it"
					FOUND=0
					for hu in ${HOST_USER_RESULT[@]}; do
						host_user=`echo $hu | awk '{print $1}'`
	                        	        host_pass=`echo $hu | awk '{print $2}'`

						if [ "$vault_user" == "$host_user" ] && [ "$vault_pass" == "$host_pass" ]; then
							#echo "      Found $vault_user"
							FOUND=1
						fi
                        	        done
						if [ $FOUND -eq 0 ]; then
                                        	echo "      Did not find $vault_user on the host.  Creating the user and grants!!"
						mysql --defaults-file=$MYSQL_USER_CONFIG -h $ip -P $port -e "CREATE USER '$vault_user'@'%' IDENTIFIED BY PASSWORD '$vault_pass';"
						if [ $vault_select == "Y" ]; then
							mysql --defaults-file=$MYSQL_USER_CONFIG -h $ip -P $port -e "GRANT SELECT ON *.* TO '$vault_user'@'%';"
						fi
						if [ $vault_insert == "Y" ]; then
                                        	        mysql --defaults-file=$MYSQL_USER_CONFIG -h $ip -P $port -e "GRANT SELECT,INSERT,UPDATE,DELETE ON *.* TO '$vault_user'@'%';"
	                                        fi
						mysql --defaults-file=$MYSQL_USER_CONFIG -h $ip -P $port -e "FLUSH PRIVILEGES;"
                	                fi
				else
					echo "      The vault user $vault_user, with host $vault_host did not match this servers hostname($ihost) or IP($ip)"
				fi
			done

		fi
	done

	# Done Syncing Credentials to the MySQL Hosts
	echo ""

	# Starting Sync to ProxySQL now that credentials are now on the MySQL hosts
	echo "Starting ProxySQL user sync"
	echo "  Checking for accounts to remove"
	for pu in ${PROXYSQL_USER_RESULT[@]}; do
	        proxy_user=`echo $pu | awk '{print $1}'`
                proxy_pass=`echo $pu | awk '{print $2}'`

		FOUND=0
		echo "    Checking for $proxy_user in the vault user list to see if it needs to stay"
                for u in ${VAULT_USER_RESULT[@]}; do
                	vault_host=`echo $u | awk '{print $1}'`
                        vault_user=`echo $u | awk '{print $2}'`
                        vault_pass=`echo $u | awk '{print $3}'`
                        vault_select=`echo $u | awk '{print $4}'`
                        vault_insert=`echo $u | awk '{print $5}'`

                        if [ $proxy_user == $vault_user ] && [ $proxy_pass == $vault_pass ]; then
                        	echo "        Found $proxy_user, dont need to remove"
                                FOUND=1
                         fi
		done

                if [ $FOUND -eq 0 ]; then
                	echo "      !! Found $proxy_user in vault user list.  This should be removed from ProxySQL!!"
                        mysql --defaults-file=$PROXY_USER_CONFIG -e "DELETE FROM mysql_users WHERE username = '$proxy_user' AND password = '$proxy_pass';"
			if [ $? -eq 0 ];then
				echo "      $proxy_user was successfully removed!"
			fi
			mysql --defaults-file=$PROXY_USER_CONFIG -e "LOAD MYSQL USERS TO RUNTIME;"
			mysql --defaults-file=$PROXY_USER_CONFIG -e "SAVE MYSQL USERS TO DISK;"
		fi
	done

	echo "  Checking for accounts to add to ProxySQL"
	for u in ${VAULT_USER_RESULT[@]}; do
                vault_host=`echo $u | awk '{print $1}'`
                vault_user=`echo $u | awk '{print $2}'`
                vault_pass=`echo $u | awk '{print $3}'`
                vault_select=`echo $u | awk '{print $4}'`
        	vault_insert=`echo $u | awk '{print $5}'`

		echo "    Processing User $vault_user with host $vault_host"
		echo "      Discovering the host $vault_host given by vault in the mysql_inventory, to get the IP to use in the ProxySQL servers config."
		host_ip=''
		host_group_id=''
		host_ip=`mysql --defaults-file=$MYSQL_USER_CONFIG mysql_inventory -Bse "select ip from hosts where host='$vault_host' OR ip='$vault_host';"`

		if [ ! $host_ip ]; then
			echo "      No IP found for $vault_host in the host or ip field of the table.  Please check the mysql_inventory to ensure your hosts/ip match the hostname or ip configured in your vault policies."
		else
			host_port=`mysql --defaults-file=$MYSQL_USER_CONFIG mysql_inventory -Bse "select port from hosts where host='$vault_host' OR ip='$vault_host';"`
			if [ ${#host_port} -eq 0 ]; then
				host_port=3306
			fi
			echo "      Discovered IP $host_ip for host $vault_host"
			echo "      Checking if there is a host group for this host. First Get the IP, and then Check"
			host_group_id=`mysql --defaults-file=$PROXY_USER_CONFIG -Bse "select hostgroup_id from mysql_servers WHERE hostname = '$host_ip';"`
			if [ -z $host_group_id ] ;then
				echo "      No Host Group for this server.  Creating one now.  Grabbing the max ID and incrementing for the next ID"
				MAX_ID=`mysql --defaults-file=$PROXY_USER_CONFIG -Bse "select max(hostgroup_id) FROM mysql_servers"`
				MAX_ID=$(( MAX_ID + 1))
				echo "      Discovered and incremented MAX ID for servers is : $MAX_ID"
				echo "      Adding MySQL server to ProxySQL"
				mysql --defaults-file=$PROXY_USER_CONFIG -e "INSERT INTO mysql_servers(hostgroup_id,hostname,port) VALUES ($MAX_ID,'$host_ip',$host_port);"

				if [ $? -ne 0 ]; then
					echo "Failed to insert new host.  Please investigate!!!"; exit 1
				fi

				mysql --defaults-file=$PROXY_USER_CONFIG -e "LOAD MYSQL SERVERS TO RUNTIME;"
				mysql --defaults-file=$PROXY_USER_CONFIG -e "SAVE MYSQL SERVERS TO DISK;"

				host_group_id=$MAX_ID
			fi
			echo "      IP found in ProxySQL Servers with Host Group ID = '$host_group_id'"

			FOUND=0
			for pu in ${PROXYSQL_USER_RESULT[@]}; do
				proxy_user=`echo $pu | awk '{print $1}'`
				proxy_pass=`echo $pu | awk '{print $2}'`

				if [ $vault_user == $proxy_user ] && [ $vault_pass == $proxy_pass ]; then
	                        	echo "          Found $vault_user"
        	                    	FOUND=1
                	        fi
			done
			if [ $FOUND -eq 0 ]; then
                		echo "        Did not find $vault_user on the host.  Creating the user and grants!!"
				mysql --defaults-file=$PROXY_USER_CONFIG -e "INSERT INTO mysql_users(username,password,default_hostgroup) VALUES ('$vault_user','$vault_pass',$host_group_id);"
				mysql --defaults-file=$PROXY_USER_CONFIG -e "LOAD MYSQL USERS TO RUNTIME;"
				mysql --defaults-file=$PROXY_USER_CONFIG -e "SAVE MYSQL USERS TO DISK;"
			fi
		fi
	done
    echo "Completed Sync Process.  Sleeping"
    echo ""
    sleep 2
done

