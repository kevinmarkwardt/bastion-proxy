#!/bin/bash

# For added security, the database server credentials will be stored in a encrypted config file, using mysql_config_editor, as root since the script will be scheduled under root.
# Make sure you are using the Oracle MySQL client that has the mysql_config_editor feature.  https://dev.mysql.com/doc/refman/5.7/en/mysql-config-editor.html
# Script will only touch users that start with thre PREFIX defined, which are vault generated users.  All other users will be ignored.

# Global parameters
PROXY_USER_CONFIG='proxysql'
MYSQL_USER_CONFIG='mysql'
MYSQL_USER_PREFIX='v-ldap'

db_connection(){
    CONNECTION_STATUS_FAILED=1
    while [ $CONNECTION_STATUS_FAILED -eq 1 ]; do
        CONNECTION_STATUS_FAILED=0
        MYSQL_CONNECT_CHECK=`mysql --login-path=$MYSQL_USER_CONFIG -e 'SHOW DATABASES'`
        if [ $? -ne 0 ] ;then
            echo "MySQL connection failed."
            CONNECTION_STATUS_FAILED=1
        fi
        PROXY_CONNECT_CHECK=`mysql --login-path=$PROXY_USER_CONFIG -e 'SHOW DATABASES'`
        if [ $? -ne 0 ] ;then
        	echo "ProxySQL connection failed."
        	CONNECTION_STATUS_FAILED=1
        fi
        sleep 1
    done
}

while true; do
    # Validate database connectivity
    db_connection

    # Capture users in Local MySQL store, confirm they are all less than 24 hours in age.  Anything older needs to be cleaned out.
    # Will only ne working on credentials that start with v-ldap and are vault created credentials.  This script will not touch any other logins.
    OLD_IFS=$IFS
    IFS=$'\n'

    USER_RESULT=($(mysql --login-path=$MYSQL_USER_CONFIG -Bse "SELECT Host,User,authentication_string,Select_priv,Insert_priv FROM mysql.user WHERE TIMESTAMPDIFF(HOUR, password_last_changed, NOW()) < 24"))

    for i in ${USER_RESULT[@]}; do
        host=`echo $i | awk '{print $1}'`
        user=`echo $i | awk '{print $2}'`
        pass=`echo $i | awk '{print $3}'`
        select=`echo $i | awk '{print $4}'`
        insert=`echo $i | awk '{print $5}'`
        echo "Host : $host and User : $user with SELECT $select or INSERT $insert"
    done

    # Capture users and hosts in the Local MySQL store
	VAULT_USER_RESULT=($(mysql --login-path=$MYSQL_USER_CONFIG -Bse "SELECT Host,User,authentication_string,Select_priv,Insert_priv FROM mysql.user WHERE TIMESTAMPDIFF(HOUR, password_last_changed, NOW()) < 24"))
	HOST_RESULT=($(mysql --login-path=$MYSQL_USER_CONFIG -Bse "SELECT host,ip,port,enabled,creds_created_count FROM mysql_inventory.hosts"))
	PROXYSQL_USER_RESULT=($(mysql --login-path=$PROXY_USER_CONFIG -Bse "SELECT username,password FROM mysql_users WHERE username LIKE '$MYSQL_USER_PREFIX%'"))

	# Loop thorugh each server
    	for i in ${HOST_RESULT[@]}; do
                ihost=`echo $i | awk '{print $1}'`
                ip=`echo $i | awk '{print $2}'`
		port=`echo $i | awk '{print $3}'`
                enabled=`echo $i | awk '{print $4}'`
                cred_count=`echo $i | awk '{print $5}'`

                echo "Sync Creds on Host : $ihost with IP $ip if it's enabled ($enabled)"

		echo "Validate Connectivity to $ip with $port"

		CONNECT_CHECK=`mysql --login-path=$MYSQL_USER_CONFIG -h $ip -P $port -e "SHOW DATABASES"`
		if [ $? -ne 0 ] || [ $enabled -eq 0 ] ;then
			echo "  Failed to connect to $ihost or it's disabled : $enabled"		
		else
			echo "  Starting sync on $ihost"
			HOST_USER_RESULT=($(mysql --login-path=$MYSQL_USER_CONFIG -h $ip -P $port -Bse "SELECT user,authentication_string FROM mysql.user WHERE user LIKE '$MYSQL_USER_PREFIX%'"))

			echo "    Sync and remove old stale credentials"
			for hu in ${HOST_USER_RESULT[@]}; do
				host_user=`echo $hu | awk '{print $1}'`
				host_pass=`echo $hu | awk '{print $2}'`
				#echo "      Checking for user $host_user in the vault users."
				FOUND=0
				for u in ${VAULT_USER_RESULT[@]}; do
				        vault_host=`echo $u | awk '{print $1}'`
				        vault_user=`echo $u | awk '{print $2}'`
				        vault_pass=`echo $u | awk '{print $3}'`
				        vault_select=`echo $u | awk '{print $4}'`
				        vault_insert=`echo $u | awk '{print $5}'`

					if [ $host_user == $vault_user ] && [ $host_pass == $vault_pass ]; then
						#echo "      Found $user, dont need to remove"
						FOUND=1
					fi
	    			done

				if [ $FOUND -eq 0 ]; then
					echo "        !! Did not find $host_user in vault user list.  This should be removed from the server!!"
					mysql --login-path=$MYSQL_USER_CONFIG -h $ip -P $port -e "DROP USER '$host_user'@'%';"
                                        mysql --login-path=$MYSQL_USER_CONFIG -h $ip -P $port -e "FLUSH PRIVILEGES;"
				fi
			done

			echo "    Sync and add new Vault credentials"
			for u in ${VAULT_USER_RESULT[@]}; do
                        	vault_host=`echo $u | awk '{print $1}'`
                                vault_user=`echo $u | awk '{print $2}'`
                                vault_pass=`echo $u | awk '{print $3}'`
                                vault_select=`echo $u | awk '{print $4}'`
                                vault_insert=`echo $u | awk '{print $5}'`

				#echo "      Checking for vault user $vault_user on the host.  If it's not there then we need to add it"
				FOUND=0
				for hu in ${HOST_USER_RESULT[@]}; do
					host_user=`echo $hu | awk '{print $1}'`
	                                host_pass=`echo $hu | awk '{print $2}'`
	
					if [ $vault_user == $host_user ] && [ $vault_pass == $host_pass ]; then
						#echo "      Found $vault_user"
						FOUND=1
					fi	
                                done
				if [ $FOUND -eq 0 ]; then
                                        echo "      Did not find $vault_user on the host.  Creating the user and grants!!"
					mysql --login-path=$MYSQL_USER_CONFIG -h $ip -P $port -e "CREATE USER '$vault_user'@'%' IDENTIFIED BY PASSWORD '$vault_pass';"
					if [ $vault_select == "Y" ]; then
						mysql --login-path=$MYSQL_USER_CONFIG -h $ip -P $port -e "GRANT SELECT ON *.* TO '$vault_user'@'%';"
					fi
					if [ $vault_insert == "Y" ]; then
                                                mysql --login-path=$MYSQL_USER_CONFIG -h $ip -P $port -e "GRANT SELECT,INSERT,UPDATE,DELETE ON *.* TO '$vault_user'@'%';"
                                        fi
					mysql --login-path=$MYSQL_USER_CONFIG -h $ip -P $port -e "FLUSH PRIVILEGES;"
                                fi
			done

		fi
	done
	
	# Done Syncing Credentials to the MySQL Hosts

	# Starting Sync to ProxySQL now that credentials are now on the MySQL hosts
	echo "Starting ProxySQL user sync"
	echo "  Checking for accounts to remove"
	for pu in ${PROXYSQL_USER_RESULT[@]}; do
	        proxy_user=`echo $pu | awk '{print $1}'`
                proxy_pass=`echo $pu | awk '{print $2}'`

		FOUND=0
		echo "    Checking for $proxy_user and $proxy_pass in the vault user list to see if it needs to stay"
                for u in ${VAULT_USER_RESULT[@]}; do
                	vault_host=`echo $u | awk '{print $1}'`
                        vault_user=`echo $u | awk '{print $2}'`
                        vault_pass=`echo $u | awk '{print $3}'`
                        vault_select=`echo $u | awk '{print $4}'`
                        vault_insert=`echo $u | awk '{print $5}'`

                        if [ $proxy_user == $vault_user ] && [ $proxy_pass == $vault_pass ]; then
                        	echo "        Found $proxy_user, dont need to remove"
                                FOUND=1
                         fi
		done

                if [ $FOUND -eq 0 ]; then
                	echo "      !! Did not find $proxy_user in vault user list.  This should be removed from ProxySQL!!"
                        mysql --login-path=$PROXY_USER_CONFIG -e "DELETE FROM mysql_users WHERE username = '$proxy_user' AND password = '$proxy_pass';"
			if [ $? -eq 0 ];then
				echo "      $proxy_user was successfully removed!"
			fi
			mysql --login-path=$PROXY_USER_CONFIG -e "LOAD MYSQL USERS TO RUNTIME;"
			mysql --login-path=$PROXY_USER_CONFIG -e "SAVE MYSQL USERS TO DISK;"
		fi
	done

	echo "  Checking for accounts to add to ProxySQL"
	for u in ${VAULT_USER_RESULT[@]}; do
                vault_host=`echo $u | awk '{print $1}'`
                vault_user=`echo $u | awk '{print $2}'`
                vault_pass=`echo $u | awk '{print $3}'`
                vault_select=`echo $u | awk '{print $4}'`
        	vault_insert=`echo $u | awk '{print $5}'`
		
		echo "    Checking for host $vault_host in ProxySQL servers"
		host_ip=''
		host_group_id=''
		host_ip=`mysql --login-path=$MYSQL_USER_CONFIG mysql_inventory -Bse "select ip from hosts where host='$vault_host';"`

		if [ $host_ip == '' ]; then
			echo "      No IP found for $vault_host.  Exiting"
			exit 1
		else
			host_port=`mysql --login-path=$MYSQL_USER_CONFIG mysql_inventory -Bse "select port from hosts where host='$vault_host';"`
			echo "      Discovered IP $host_ip for host $vault_host"
			echo "      Checking if there is a host group for this host. First Get the IP, and then Check"
			host_group_id=`mysql --login-path=$PROXY_USER_CONFIG -Bse "select hostgroup_id from mysql_servers WHERE hostname = '$host_ip';"`
			if [ -z $host_group_id ] ;then
				echo "      No Host Group for this server.  Creating one now.  Grabbing the max ID and incrementing for the next ID"
				MAX_ID=`mysql --login-path=$PROXY_USER_CONFIG -Bse "select max(hostgroup_id) FROM mysql_servers"`
				MAX_ID=$(( MAX_ID + 1))
				echo "      Discovered and incremented MAX ID for servers is : $MAX_ID"
				echo "      Adding MySQL server to ProxySQL"
				mysql --login-path=$PROXY_USER_CONFIG -e "INSERT INTO mysql_servers(hostgroup_id,hostname,port) VALUES ($MAX_ID,'$host_ip',$host_port);"

				if [ $? -ne 0 ]; then
					echo "Failed to insert new host.  Please investigate!!!"; exit 1
				fi

				mysql --login-path=$PROXY_USER_CONFIG -e "LOAD MYSQL SERVERS TO RUNTIME;"
				mysql --login-path=$PROXY_USER_CONFIG -e "SAVE MYSQL SERVERS TO DISK;"
				
				host_group_id=$MAX_ID
			fi
			echo "      Host Group ID = '$host_group_id'"
		fi

		FOUND=0
		for pu in ${PROXYSQL_USER_RESULT[@]}; do
			proxy_user=`echo $pu | awk '{print $1}'`
			proxy_pass=`echo $pu | awk '{print $2}'`

                	echo "        Checking for $vault_user within ProxySQL $proxy_user to see if we need to add this account"
			if [ $vault_user == $proxy_user ] && [ $vault_pass == $proxy_pass ]; then
                        	echo "          Found $vault_user"
                            	FOUND=1
                        fi	
		done	
		if [ $FOUND -eq 0 ]; then
                	echo "        Did not find $vault_user on the host.  Creating the user and grants!!"
			mysql --login-path=$PROXY_USER_CONFIG -e "INSERT INTO mysql_users(username,password,default_hostgroup) VALUES ('$vault_user','$vault_pass',$host_group_id);"
			mysql --login-path=$PROXY_USER_CONFIG -e "LOAD MYSQL USERS TO RUNTIME;"
			mysql --login-path=$PROXY_USER_CONFIG -e "SAVE MYSQL USERS TO DISK;"
		fi
	done

    sleep 2
done
